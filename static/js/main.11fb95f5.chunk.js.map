{"version":3,"sources":["theme.ts","components/Jumbotron.tsx","components/ActionButtonsComponent.tsx","components/Navbar.tsx","components/AppContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","Jumbotron","props","useState","titleIndex","setTitleIndex","useEffect","setTimeout","style","paddingTop","Grid","container","item","xs","Typography","paddingBottom","align","variant","component","gutterBottom","color","ActionButtonsComponent","paddingRight","Fab","float","size","useStyles","makeStyles","root","flexGrow","Navbar","classes","React","value","setValue","Paper","className","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","AppContainer","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11fb95f5.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ffecb3\",\r\n    },\r\n    secondary: {\r\n      main: \"#b71c1c\",\r\n    },\r\n  },\r\n});\r\nexport default theme","import React, { useEffect, useState } from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport function Jumbotron(props: IProps | undefined) {\r\n\r\n    const [titleIndex, setTitleIndex] = useState(0);\r\n    const TITLES = [\r\n        \"A Software Engineer.\",\r\n        \"/ Full-Stack Developer.\",\r\n        \"A self-starter.\",\r\n        \"An enthusiastic learner.\",\r\n        \"An innovator.\"\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            titleIndex < 4 ? (setTitleIndex(titleIndex => titleIndex + 1)) : (setTitleIndex(titleIndex => 0));\r\n        }, 2000);\r\n    }, [titleIndex]);\r\n\r\n    return (\r\n        <div style={{ paddingTop: \"10rem\" }}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Typography style={{ paddingBottom: \".5rem\" }} align=\"center\" variant=\"h2\" component=\"h2\" gutterBottom color=\"textSecondary\">\r\n                        <b>Hi, I'm Reed.</b>\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Typography style={{ paddingBottom: \"1rem\" }} align=\"center\" variant=\"h4\" component=\"h2\" gutterBottom color=\"secondary\">\r\n                        {TITLES[titleIndex]}\r\n                    </Typography>\r\n                    <Typography align=\"center\" variant=\"h5\" component=\"h2\" color=\"textSecondary\">\r\n                        I'm always looking forward -\r\n                        <br />\r\n                        to taking on the next challenge!\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\n\r\nexport function ActionButtonsComponent() {\r\n    return (\r\n        <div>\r\n            <div style={{ paddingRight: \"1rem\", paddingTop: \"1rem\" }}>\r\n                <Fab style={{ float: \"right\" }} size=\"small\" color=\"secondary\">\r\n                    <DescriptionIcon />\r\n                </Fab>\r\n            </div>\r\n            <div style={{ paddingRight: \"4rem\" }}>\r\n\r\n                <Fab style={{ float: \"right\" }} size=\"small\" color=\"secondary\">\r\n                    <GitHubIcon />\r\n                </Fab>\r\n            </div>\r\n            <div style={{ paddingRight: \"7rem\" }}>\r\n                <Fab style={{ float: \"right\" }} size=\"small\" color=\"secondary\">\r\n                    <LinkedInIcon />\r\n                </Fab>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nexport function Navbar() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"secondary\"\r\n                textColor=\"secondary\"\r\n                centered\r\n            >\r\n                <Tab label=\"Home\" />\r\n                <Tab label=\"About Me\" />\r\n                <Tab label=\"Skills\" />\r\n                <Tab label=\"Contact Me\" />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"./Jumbotron\";\r\nimport { AboutMe } from \"./AboutMe\";\r\nimport StepperComponent from \"./StepperComponent\";\r\nimport { ActionButtonsComponent } from \"./ActionButtonsComponent\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport function AppContainer() {\r\n\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Navbar />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <ActionButtonsComponent />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Jumbotron />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\nimport theme from './theme';\nimport { AppContainer } from './components/AppContainer';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppContainer />\n    </ThemeProvider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}